var HASHTAG         = 'faxbigbrother';
var COUNT           = 30;
var API_INTERVAL    = 10000;

var config  = require('nconf');
config.argv().env().file({file: __dirname + '/config.json'});

var Twitter         = require('twitter');
var sha1            = require('node-sha1');
var fs              = require('fs');
var aws             = require('aws-sdk');

var FaxHandler      = require('./fax');
var util            = require('./util');
var models          = require('./models');
var sequelize       = models.sequelize;
var User            = models.User;
var Fax             = models.Fax;

aws.config.update({
    accessKeyId: config.get('AWS_ACCESS_KEY'),
    secretAccessKey: config.get('AWS_SECRET_KEY')
})

var client = new Twitter({
    consumer_key: config.get('TWITTER_CONSUMER_KEY'),
    consumer_secret: config.get('TWITTER_CONSUMER_SECRET'),
    access_token_key: config.get('TWITTER_ACCESS_TOKEN'),
    access_token_secret: config.get('TWITTER_ACCESS_SECRET'),
});

var sinceId = 0

var getLatest = function() {
    console.log('Searching latest tweets...');

    var params = {
        q:              HASHTAG,
        result_type:    "recent",
        count:          COUNT
    }
    if (sinceId)
        params.since_id = sinceId;

    client.get('search/tweets', params, function(err, tweets, response){
        if (err) 
            return console.log('ERROR:', err);

        console.log('Got latest tweets, processing...');

        for (var i = 0; i < tweets.statuses.length; i++) {
            var tweet = tweets.statuses[i];

            var token = sha1(Math.random().toString()+config.get('TOKEN_SALT'));

            var user = {
                social_user_id: 'twitter_'+tweet.user.id_str,
                username:       tweet.user.screen_name,
                name:           tweet.user.name,
                avatar_url:     tweet.user.profile_image_url_https,
                mod_date:       sequelize.fn('NOW'),
                access_token:   token
            };

            var data = {
                body:               tweet.text,
                ip_address_hashed:  ''
            }

            if (
                tweet.entities &&
                tweet.entities.media &&
                tweet.entities.media.length &&
                tweet.entities.media[0].media_url_https
            ) {
                var photo = tweet.entities.media[0].media_url_https;
            }

            try {
                handleUserAndPhoto(user, data, photo);
            } catch(err) {
                console.log('An error occurred. Oh well...');
            }
            // sinceId = tweet.id_str;
        }
    });
};

var handleUserAndPhoto = function(user, data, photo) {
    console.log('user: ', user, '; data: ', data, '; photo: ', photo);
    
    User.upsert(user).then(function(created) {

        if (!created) {
            console.log('user '+ user.social_user_id + 'exists! Skipping...');
            return false;
        }

        User.uploadAvatarS3(user, function(err, user) {
            if (err)
                return console.log('FAILED TO UPLOAD AVATAR TO S3...');
            
            if (photo) {
                var ext = photo.split('.').pop();
                var tmpFile = 'tmp/'+sha1(Math.random()+'_trolalo')+'.'+ext;
                util.downloadFile(photo, tmpFile, function(filename) {
                    util.processImageFile(filename, function(err, newFile) {
                        autoGenerateFax(user, data, newFile);
                    });
                });
            } else {
                autoGenerateFax(user, data, null);
            }             
        });
    });
}

var autoGenerateFax = function(user, data, imgFile) {
    console.log('auto generating');
    FaxHandler.generate(data, user, imgFile, function(err, fax, buff, file) {

        if (err)
            return console.log('AN ERROR OCCURRED DURING FAX CREATION: ', err);

        fax.autogenerated   = 1;
        Fax.uploadS3AndCreateInstance(fax, buff, file, function(err, fax) {
            if (err)
                return console.log('ERROR OCCURRED WHILE UPLOADING FAX:' , err);
            console.log('fax automatically generated: ', fax);
        });
    });
}

console.log('starting Twitter bot...');

setInterval(getLatest, API_INTERVAL);
getLatest();